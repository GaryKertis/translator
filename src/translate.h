#ifndef TRANSLATE_H
#define TRANSLATE_H

#include <iostream>
#include <unordered_map>
#include <string>
#include <bitset>
#include <cctype>

std::string translate(std::string line) {
std::string result;
std::unordered_map <std::string, std::string> alphabet;
alphabet = {\
	{"Ͱ","t"},{"ͱ","t"},{"Ͳ","t"},{"ͳ","t"},{"Ͷ","u"},{"ͷ","u"},{"ͻ","c"},{"ͼ","c"},{"ͽ","c"},{"Ϳ","j"},{"Ͼ","c"},{"Ͽ","d"},{"Ά","a"},{"Έ","e"},{"Ή","h"},{"Ί","i"},\
	{"Ό","o"},{"Ύ","y"},{"Ώ","u"},{"ΐ","i"},{"Α","a"},{"Β","b"},{"Γ","r"},{"Δ","a"},{"Ε","e"},{"Ζ","z"},{"Η","h"},{"Θ","o"},{"Ι","i"},{"Κ","k"},{"Λ","a"},{"Μ","m"},\
	{"Ν","n"},{"Ξ","e"},{"Ο","o"},{"Π","n"},{"Ρ","p"},{"Σ","e"},{"Τ","t"},{"Υ","y"},{"Φ","f"},{"Χ","x"},{"Ψ","w"},{"Ω","u"},{"Ϊ","i"},{"Ϋ","y"},{"ά","a"},{"έ","e"},\
	{"ή","n"},{"ί","i"},{"ΰ","v"},{"α","a"},{"β","b"},{"γ","y"},{"δ","s"},{"ε","e"},{"ζ","z"},{"η","n"},{"θ","o"},{"ι","i"},{"κ","k"},{"λ","a"},{"μ","m"},{"ν","v"},\
	{"ξ","e"},{"ο","o"},{"π","r"},{"ρ","p"},{"ς","c"},{"σ","a"},{"τ","t"},{"υ","v"},{"φ","f"},{"χ","x"},{"ψ","w"},{"ω","w"},{"ϊ","i"},{"ϋ","v"},{"ό","o"},{"ύ","v"},\
	{"ώ","w"},{"Ϗ","k"},{"ϐ","b"},{"ϑ","n"},{"ϒ","y"},{"ϓ","y"},{"ϔ","y"},{"ϕ","f"},{"ϖ","w"},{"ϗ","x"},{"Ϙ","q"},{"ϙ","q"},{"Ϛ","c"},{"ϛ","c"},{"Ϝ","f"},{"ϝ","f"},\
	{"Ϟ","n"},{"ϟ","s"},{"Ϡ","m"},{"ϡ","l"},{"Ϣ","w"},{"ϣ","w"},{"Ϥ","y"},{"ϥ","y"},{"Ϧ","b"},{"ϧ","g"},{"Ϩ","z"},{"ϩ","z"},{"Ϫ","x"},{"ϫ","x"},{"Ϭ","b"},{"ϭ","b"},\
	{"Ϯ","t"},{"ϯ","t"},{"ϰ","x"},{"ϱ","g"},{"ϲ","c"},{"ϳ","j"},{"ϴ","b"},{"ϵ","e"},{"϶","e"},{"Ϸ","b"},{"ϸ","b"},{"Ϲ","c"},{"Ϻ","m"},{"ϻ","m"},{"ϼ","p"},{"Ͻ","c"},\
	{"ἀ","a"},{"ἁ","a"},{"ἂ","a"},{"ἃ","a"},{"ἄ","a"},{"ἅ","a"},{"ἆ","a"},{"ἇ","a"},{"Ἀ","a"},{"Ἁ","a"},{"Ἂ","a"},{"Ἃ","a"},{"Ἄ","a"},{"Ἅ","a"},{"Ἆ","a"},{"Ἇ","a"},\
	{"ἐ","e"},{"ἑ","e"},{"ἒ","e"},{"ἓ","e"},{"ἔ","e"},{"ἕ","e"},{"Ἐ","e"},{"Ἑ","e"},{"Ἒ","e"},{"Ἓ","e"},{"Ἔ","e"},{"Ἕ","e"},{"ἠ","n"},{"ἡ","n"},{"ἢ","n"},{"ἣ","n"},\
	{"ἤ","n"},{"ἥ","n"},{"ἦ","n"},{"ἧ","n"},{"Ἠ","h"},{"Ἡ","h"},{"Ἢ","h"},{"Ἣ","h"},{"Ἤ","h"},{"Ἥ","h"},{"Ἦ","h"},{"Ἧ","h"},{"ἰ","i"},{"ἱ","i"},{"ἲ","i"},{"ἳ","i"},\
	{"ἴ","i"},{"ἵ","i"},{"ἶ","i"},{"ἷ","i"},{"Ἰ","i"},{"Ἱ","i"},{"Ἲ","i"},{"Ἳ","i"},{"Ἴ","i"},{"Ἵ","i"},{"Ἶ","i"},{"Ἷ","i"},{"Ὀ","o"},{"Ὁ","o"},{"Ὂ","o"},{"ὃ","o"},\
	{"Ὄ","o"},{"Ὅ","o"},{"Ὀ","o"},{"Ὁ","o"},{"Ὂ","o"},{"Ὃ","o"},{"ὄ","o"},{"Ὅ","o"},{"ὐ","v"},{"Ὑ","y"},{"ὒ","v"},{"Ὓ","y"},{"ὔ","v"},{"Ὕ","y"},{"ὖ","v"},{"Ὗ","y"},\
	{"Ὑ","y"},{"Ὓ","y"},{"Ὕ","y"},{"Ὗ","y"},{"ὠ","w"},{"ὡ","w"},{"ὢ","w"},{"ὣ","w"},{"ὤ","w"},{"ὥ","w"},{"ὦ","w"},{"ὧ","w"},{"Ὠ","u"},{"Ὡ","u"},{"Ὢ","u"},{"Ὣ","u"},\
	{"Ὤ","u"},{"Ὥ","u"},{"Ὦ","u"},{"Ὧ","u"},{"ὰ","a"},{"ά","a"},{"ὲ","e"},{"έ","e"},{"ὴ","n"},{"ή","n"},{"ὶ","i"},{"ί","i"},{"ὸ","o"},{"ό","o"},{"ὺ","v"},{"ύ","v"},\
	{"ὼ","w"},{"ώ","w"},{"ᾀ","a"},{"ᾁ","a"},{"ᾂ","a"},{"ᾃ","a"},{"ᾄ","a"},{"ᾅ","a"},{"ᾆ","a"},{"ᾇ","a"},{"ᾈ","a"},{"ᾉ","a"},{"ᾊ","a"},{"ᾋ","a"},{"ᾌ","a"},{"ᾍ","a"},\
	{"ᾎ","a"},{"ᾏ","a"},{"ᾐ","n"},{"ᾑ","n"},{"ᾒ","n"},{"ᾓ","n"},{"ᾔ","n"},{"ᾕ","n"},{"ᾖ","n"},{"ᾗ","n"},{"ᾘ","h"},{"ᾙ","h"},{"ᾚ","h"},{"ᾛ","h"},{"ᾜ","h"},{"ᾝ","h"},\
	{"ᾞ","h"},{"ᾟ","h"},{"ᾠ","w"},{"ᾡ","w"},{"ᾢ","w"},{"ᾣ","w"},{"ᾤ","w"},{"ᾥ","w"},{"ᾦ","w"},{"ᾧ","w"},{"ᾨ","u"},{"ᾩ","u"},{"ᾪ","u"},{"ᾫ","u"},{"ᾬ","u"},{"ᾭ","u"},\
	{"ᾮ","u"},{"ᾯ","u"},{"ᾰ","a"},{"ᾱ","a"},{"ᾲ","a"},{"ᾳ","a"},{"ᾴ","a"},{"ᾶ","a"},{"ᾷ","a"},{"Ᾰ","a"},{"Ᾱ","a"},{"Ὰ","a"},{"Ά","a"},{"ᾼ","a"},{"ῂ","n"},{"ῃ","n"},\
	{"ῄ","n"},{"ῆ","n"},{"ῇ","n"},{"Ὲ","e"},{"Έ","e"},{"Ὴ","h"},{"Ή","h"},{"ῌ","h"},{"ῐ","i"},{"ῑ","i"},{"ῒ","i"},{"ΐ","i"},{"ῖ","i"},{"ῗ","i"},{"Ῐ","i"},{"Ῑ","i"},\
	{"Ὶ","i"},{"Ί","i"},{"ῠ","v"},{"ῡ","v"},{"ῢ","v"},{"ΰ","v"},{"ῤ","p"},{"ῥ","p"},{"ῦ","v"},{"ῧ","v"},{"Ῠ","y"},{"Ῡ","y"},{"Ὺ","y"},{"Ύ","y"},{"Ῥ","p"},{"ῲ","w"},\
	{"ῳ","w"},{"ῴ","w"},{"ῶ","w"},{"ῷ","w"},{"Ὸ","o"},{"Ό","i"},{"Ὼ","u"},{"Ώ","u"},{"ῼ","u"},{"ὀ", "o"},{"ὅ", "o"},{"ὕ","v"},{"ὑ","v"},{"ὗ", "v"},{"ὁ","o"}};


for(int i = 0; line[i] != '\0';) {

	std::string input(1, line[i]);
	std::string input2(1,line[i+1]);
	std::string input3(1, line[i+2]);
	std::string thisChar;

	std::bitset<8> bites(input.c_str()[0]);

	if (bites[5] == 1 && bites[6] == 1 && bites[7] == 1) {
			input.append(input2);
			input.append(input3);
			i = i + 3;
	} else if (bites[6] == 1 && bites[7] == 1) {
			input.append(input2);
			i = i + 2;
	} 

	std::unordered_map<std::string,std::string>::const_iterator got = alphabet.find (input);

	if (got == alphabet.end()) {
			thisChar = input;
			if(thisChar.find_first_not_of(' ') != std::string::npos)
				{
					std::cout << "No match for character " << thisChar << std::endl;
				} else {
					result.append(thisChar);
				}

			i = i + 1;
		} else {
			result.append(alphabet[input]);
		}
}

return result;

}

#endif